using System;
using System.Collections.Generic;
using UnityEngine;

namespace UnityProjectArchitect.Core
{
    [CreateAssetMenu(fileName = "ProjectData", menuName = "Unity Project Architect/Project Data", order = 1)]
    public class ProjectData : ScriptableObject
    {
        [Header("Project Information")]
        [SerializeField] private string projectName = "";
        [SerializeField] private string projectDescription = "";
        [SerializeField] private string projectVersion = "1.0.0";
        [SerializeField] private ProjectType projectType = ProjectType.General;
        [SerializeField] private UnityVersion targetUnityVersion = UnityVersion.Unity2023_3;

        [Header("Team & Contact")]
        [SerializeField] private string teamName = "";
        [SerializeField] private string contactEmail = "";
        [SerializeField] private string repositoryUrl = "";

        [Header("Documentation Settings")]
        [SerializeField] private List<DocumentationSectionData> documentationSections = new List<DocumentationSectionData>();
        [SerializeField] private bool autoGenerateDocumentation = true;
        [SerializeField] private string documentationOutputPath = "Documentation/";

        [Header("AI Integration")]
        [SerializeField] private bool useAIAssistance = false;
        [SerializeField] private AIProvider aiProvider = AIProvider.Claude;

        [Header("Template Configuration")]
        [SerializeField] private List<TemplateReference> appliedTemplates = new List<TemplateReference>();
        [SerializeField] private FolderStructureData folderStructure = new FolderStructureData();

        [Header("Metadata")]
        [SerializeField] private DateTime createdDate;
        [SerializeField] private DateTime lastModifiedDate;
        [SerializeField] private int documentationVersion = 1;

        public string ProjectName 
        { 
            get => projectName; 
            set 
            { 
                projectName = value; 
                MarkModified(); 
            } 
        }

        public string ProjectDescription 
        { 
            get => projectDescription; 
            set 
            { 
                projectDescription = value; 
                MarkModified(); 
            } 
        }

        public string ProjectVersion 
        { 
            get => projectVersion; 
            set 
            { 
                projectVersion = value; 
                MarkModified(); 
            } 
        }

        public ProjectType ProjectType 
        { 
            get => projectType; 
            set 
            { 
                projectType = value; 
                MarkModified(); 
            } 
        }

        public UnityVersion TargetUnityVersion 
        { 
            get => targetUnityVersion; 
            set 
            { 
                targetUnityVersion = value; 
                MarkModified(); 
            } 
        }

        public string TeamName 
        { 
            get => teamName; 
            set 
            { 
                teamName = value; 
                MarkModified(); 
            } 
        }

        public string ContactEmail 
        { 
            get => contactEmail; 
            set 
            { 
                contactEmail = value; 
                MarkModified(); 
            } 
        }

        public string RepositoryUrl 
        { 
            get => repositoryUrl; 
            set 
            { 
                repositoryUrl = value; 
                MarkModified(); 
            } 
        }

        public List<DocumentationSectionData> DocumentationSections => documentationSections;
        public bool AutoGenerateDocumentation 
        { 
            get => autoGenerateDocumentation; 
            set 
            { 
                autoGenerateDocumentation = value; 
                MarkModified(); 
            } 
        }

        public string DocumentationOutputPath 
        { 
            get => documentationOutputPath; 
            set 
            { 
                documentationOutputPath = value; 
                MarkModified(); 
            } 
        }

        public bool UseAIAssistance 
        { 
            get => useAIAssistance; 
            set 
            { 
                useAIAssistance = value; 
                MarkModified(); 
            } 
        }

        public AIProvider AIProvider 
        { 
            get => aiProvider; 
            set 
            { 
                aiProvider = value; 
                MarkModified(); 
            } 
        }

        public List<TemplateReference> AppliedTemplates => appliedTemplates;
        public FolderStructureData FolderStructure => folderStructure;
        public DateTime CreatedDate => createdDate;
        public DateTime LastModifiedDate => lastModifiedDate;
        public int DocumentationVersion => documentationVersion;

        private void OnEnable()
        {
            if (createdDate == default)
            {
                createdDate = DateTime.Now;
                lastModifiedDate = createdDate;
            }

            InitializeDefaultDocumentationSections();
        }

        private void InitializeDefaultDocumentationSections()
        {
            if (documentationSections.Count == 0)
            {
                documentationSections.AddRange(new[]
                {
                    new DocumentationSectionData { SectionType = DocumentationSectionType.GeneralProductDescription, IsEnabled = true },
                    new DocumentationSectionData { SectionType = DocumentationSectionType.SystemArchitecture, IsEnabled = true },
                    new DocumentationSectionData { SectionType = DocumentationSectionType.DataModel, IsEnabled = true },
                    new DocumentationSectionData { SectionType = DocumentationSectionType.APISpecification, IsEnabled = true },
                    new DocumentationSectionData { SectionType = DocumentationSectionType.UserStories, IsEnabled = true },
                    new DocumentationSectionData { SectionType = DocumentationSectionType.WorkTickets, IsEnabled = true }
                });
            }
        }

        public void AddTemplate(TemplateReference template)
        {
            if (!appliedTemplates.Contains(template))
            {
                appliedTemplates.Add(template);
                MarkModified();
            }
        }

        public void RemoveTemplate(TemplateReference template)
        {
            if (appliedTemplates.Remove(template))
            {
                MarkModified();
            }
        }

        public DocumentationSectionData GetDocumentationSection(DocumentationSectionType sectionType)
        {
            return documentationSections.Find(section => section.SectionType == sectionType);
        }

        public void UpdateDocumentationSection(DocumentationSectionType sectionType, string content)
        {
            var section = GetDocumentationSection(sectionType);
            if (section != null)
            {
                section.Content = content;
                section.LastUpdated = DateTime.Now;
                MarkModified();
            }
        }

        public void IncrementDocumentationVersion()
        {
            documentationVersion++;
            MarkModified();
        }

        private void MarkModified()
        {
            lastModifiedDate = DateTime.Now;
#if UNITY_EDITOR
            UnityEditor.EditorUtility.SetDirty(this);
#endif
        }

        [ContextMenu("Reset to Defaults")]
        public void ResetToDefaults()
        {
            projectName = "";
            projectDescription = "";
            projectVersion = "1.0.0";
            projectType = ProjectType.General;
            targetUnityVersion = UnityVersion.Unity2023_3;
            teamName = "";
            contactEmail = "";
            repositoryUrl = "";
            documentationSections.Clear();
            InitializeDefaultDocumentationSections();
            autoGenerateDocumentation = true;
            documentationOutputPath = "Documentation/";
            useAIAssistance = false;
            aiProvider = AIProvider.Claude;
            appliedTemplates.Clear();
            folderStructure = new FolderStructureData();
            documentationVersion = 1;
            MarkModified();
        }
    }
}