using System;
using System.Collections.Generic;
using UnityEngine;

namespace UnityProjectArchitect.Core
{
    [CreateAssetMenu(fileName = "ProjectData", menuName = "Unity Project Architect/Project Data", order = 1)]
    public class ProjectData : ScriptableObject
    {
        [Header("Project Information")]
        [SerializeField] private string _projectName = "";
        [SerializeField] private string _projectDescription = "";
        [SerializeField] private string _projectVersion = "1.0.0";
        [SerializeField] private ProjectType _projectType = ProjectType.General;
        [SerializeField] private UnityVersion _targetUnityVersion = UnityVersion.Unity2023_3;

        [Header("Team & Contact")]
        [SerializeField] private string _teamName = "";
        [SerializeField] private string _contactEmail = "";
        [SerializeField] private string _repositoryUrl = "";

        [Header("Documentation Settings")]
        [SerializeField] private List<DocumentationSectionData> _documentationSections = new List<DocumentationSectionData>();
        [SerializeField] private bool _autoGenerateDocumentation = true;
        [SerializeField] private string _documentationOutputPath = "Documentation/";

        [Header("AI Integration")]
        [SerializeField] private bool _useAIAssistance = false;
        [SerializeField] private AIProvider _aiProvider = AIProvider.Claude;

        [Header("Template Configuration")]
        [SerializeField] private List<TemplateReference> _appliedTemplates = new List<TemplateReference>();
        [SerializeField] private FolderStructureData _folderStructure = new FolderStructureData();

        [Header("Metadata")]
        [SerializeField] private DateTime _createdDate;
        [SerializeField] private DateTime _lastModifiedDate;
        [SerializeField] private int _documentationVersion = 1;

        public string ProjectName 
        { 
            get => _projectName; 
            set 
            { 
                _projectName = value; 
                MarkModified(); 
            } 
        }

        public string ProjectDescription 
        { 
            get => _projectDescription; 
            set 
            { 
                _projectDescription = value; 
                MarkModified(); 
            } 
        }

        public string ProjectVersion 
        { 
            get => _projectVersion; 
            set 
            { 
                _projectVersion = value; 
                MarkModified(); 
            } 
        }

        public ProjectType ProjectType 
        { 
            get => _projectType; 
            set 
            { 
                _projectType = value; 
                MarkModified(); 
            } 
        }

        public UnityVersion TargetUnityVersion 
        { 
            get => _targetUnityVersion; 
            set 
            { 
                _targetUnityVersion = value; 
                MarkModified(); 
            } 
        }

        public string TeamName 
        { 
            get => _teamName; 
            set 
            { 
                _teamName = value; 
                MarkModified(); 
            } 
        }

        public string ContactEmail 
        { 
            get => _contactEmail; 
            set 
            { 
                _contactEmail = value; 
                MarkModified(); 
            } 
        }

        public string RepositoryUrl 
        { 
            get => _repositoryUrl; 
            set 
            { 
                _repositoryUrl = value; 
                MarkModified(); 
            } 
        }

        public List<DocumentationSectionData> DocumentationSections => _documentationSections;
        public bool AutoGenerateDocumentation 
        { 
            get => _autoGenerateDocumentation; 
            set 
            { 
                _autoGenerateDocumentation = value; 
                MarkModified(); 
            } 
        }

        public string DocumentationOutputPath 
        { 
            get => _documentationOutputPath; 
            set 
            { 
                _documentationOutputPath = value; 
                MarkModified(); 
            } 
        }

        public bool UseAIAssistance 
        { 
            get => _useAIAssistance; 
            set 
            { 
                _useAIAssistance = value; 
                MarkModified(); 
            } 
        }

        public AIProvider AIProvider 
        { 
            get => _aiProvider; 
            set 
            { 
                _aiProvider = value; 
                MarkModified(); 
            } 
        }

        public List<TemplateReference> AppliedTemplates => _appliedTemplates;
        public FolderStructureData FolderStructure => _folderStructure;
        public DateTime CreatedDate => _createdDate;
        public DateTime LastModifiedDate => _lastModifiedDate;
        public int DocumentationVersion => _documentationVersion;

        private void OnEnable()
        {
            if (_createdDate == default)
            {
                _createdDate = DateTime.Now;
                _lastModifiedDate = _createdDate;
            }

            InitializeDefaultDocumentationSections();
        }

        private void InitializeDefaultDocumentationSections()
        {
            if (_documentationSections.Count == 0)
            {
                _documentationSections.AddRange(new[]
                {
                    new DocumentationSectionData { SectionType = DocumentationSectionType.GeneralProductDescription, IsEnabled = true },
                    new DocumentationSectionData { SectionType = DocumentationSectionType.SystemArchitecture, IsEnabled = true },
                    new DocumentationSectionData { SectionType = DocumentationSectionType.DataModel, IsEnabled = true },
                    new DocumentationSectionData { SectionType = DocumentationSectionType.APISpecification, IsEnabled = true },
                    new DocumentationSectionData { SectionType = DocumentationSectionType.UserStories, IsEnabled = true },
                    new DocumentationSectionData { SectionType = DocumentationSectionType.WorkTickets, IsEnabled = true }
                });
            }
        }

        public void AddTemplate(TemplateReference template)
        {
            if (!_appliedTemplates.Contains(template))
            {
                _appliedTemplates.Add(template);
                MarkModified();
            }
        }

        public void RemoveTemplate(TemplateReference template)
        {
            if (_appliedTemplates.Remove(template))
            {
                MarkModified();
            }
        }

        public DocumentationSectionData GetDocumentationSection(DocumentationSectionType sectionType)
        {
            return _documentationSections.Find(section => section.SectionType == sectionType);
        }

        public void UpdateDocumentationSection(DocumentationSectionType sectionType, string content)
        {
            DocumentationSectionData section = GetDocumentationSection(sectionType);
            if (section != null)
            {
                section.Content = content;
                section.LastUpdated = DateTime.Now;
                MarkModified();
            }
        }

        public void IncrementDocumentationVersion()
        {
            _documentationVersion++;
            MarkModified();
        }

        private void MarkModified()
        {
            _lastModifiedDate = DateTime.Now;
#if UNITY_EDITOR
            UnityEditor.EditorUtility.SetDirty(this);
#endif
        }

        [ContextMenu("Reset to Defaults")]
        public void ResetToDefaults()
        {
            _projectName = "";
            _projectDescription = "";
            _projectVersion = "1.0.0";
            _projectType = ProjectType.General;
            _targetUnityVersion = UnityVersion.Unity2023_3;
            _teamName = "";
            _contactEmail = "";
            _repositoryUrl = "";
            _documentationSections.Clear();
            InitializeDefaultDocumentationSections();
            _autoGenerateDocumentation = true;
            _documentationOutputPath = "Documentation/";
            _useAIAssistance = false;
            _aiProvider = AIProvider.Claude;
            _appliedTemplates.Clear();
            _folderStructure = new FolderStructureData();
            _documentationVersion = 1;
            MarkModified();
        }
    }
}