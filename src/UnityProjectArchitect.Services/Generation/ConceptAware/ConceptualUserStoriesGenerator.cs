using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using UnityProjectArchitect.Core;

namespace UnityProjectArchitect.Services.ConceptAware
{
    /// <summary>
    /// Generates user stories based on game concepts rather than existing project analysis
    /// </summary>
    public class ConceptualUserStoriesGenerator : BaseConceptAwareGenerator
    {
        public ConceptualUserStoriesGenerator(string gameDescription) 
            : base(gameDescription, DocumentationSectionType.UserStories)
        {
        }

        public override async Task<string> GenerateContentAsync()
        {
            StringBuilder content = new StringBuilder();

            // Add header and metadata
            content.AppendLine("<!-- Generated by ConceptualUserStoriesGenerator -->");
            content.Append(GetSectionHeader("User Stories"));
            content.AppendLine();
            content.Append(AddTimestamp());

            // Introduction
            content.Append(GenerateIntroduction());

            // Player Personas
            content.Append(GeneratePlayerPersonas());

            // Epic Stories
            content.Append(GenerateEpicStories());

            // Core Gameplay Stories
            content.Append(GenerateCoreGameplayStories());

            // Feature Stories
            content.Append(GenerateFeatureStories());

            // Technical Stories
            content.Append(GenerateTechnicalStories());

            // Story Mapping and Prioritization
            content.Append(GenerateStoryMapping());

            // Add generation metadata
            content.Append(AddGenerationMetadata());
            content.AppendLine("<!-- End ConceptualUserStoriesGenerator -->");

            return await Task.FromResult(content.ToString());
        }

        private string GenerateIntroduction()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append(GetSectionHeader("User Stories Overview", 2));

            sb.AppendLine($"This document outlines the user stories for **{gameConcept.Title}**, ");
            sb.AppendLine($"a {gameConcept.GameGenre.ToString().ToLower()} game targeting {(!string.IsNullOrEmpty(gameConcept.TargetAudience) ? gameConcept.TargetAudience.ToLower() : "general gaming audience")}.");
            sb.AppendLine();

            sb.AppendLine("**Story Format:** All stories follow the standard format:");
            sb.AppendLine("*As a [user type], I want [functionality] so that [benefit/value].*");
            sb.AppendLine();

            return sb.ToString();
        }

        private string GeneratePlayerPersonas()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append(GetSectionHeader("Player Personas", 2));

            List<PlayerPersona> personas = GeneratePersonasForGenre();

            foreach (PlayerPersona persona in personas)
            {
                sb.Append(GetSectionHeader(persona.Name, 3));
                sb.AppendLine($"**Profile:** {persona.Description}");
                sb.AppendLine($"**Motivation:** {persona.Motivation}");
                sb.AppendLine($"**Goals:** {persona.Goals}");
                sb.AppendLine();
            }

            return sb.ToString();
        }

        private string GenerateEpicStories()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append(GetSectionHeader("Epic Stories", 2));

            sb.AppendLine("Epic stories represent major feature areas and high-level player goals.");
            sb.AppendLine();

            List<EpicStory> epics = GenerateEpicsForGenre();

            foreach (EpicStory epic in epics)
            {
                sb.Append(GetSectionHeader($"Epic: {epic.Title}", 3));
                sb.AppendLine($"**As a** {epic.UserType}, **I want** {epic.Want} **so that** {epic.SoThat}");
                sb.AppendLine();
                sb.AppendLine("**Acceptance Criteria:**");
                sb.Append(FormatList(epic.AcceptanceCriteria));
                sb.AppendLine($"**Priority:** {epic.Priority}");
                sb.AppendLine($"**Story Points:** {epic.StoryPoints}");
                sb.AppendLine();
            }

            return sb.ToString();
        }

        private string GenerateCoreGameplayStories()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append(GetSectionHeader("Core Gameplay Stories", 2));

            List<UserStory> coreStories = GenerateCoreGameplayStoriesForGenre();

            foreach (UserStory story in coreStories)
            {
                sb.AppendLine($"**{story.Title}**");
                sb.AppendLine($"As a {story.UserType}, I want {story.Want} so that {story.SoThat}");
                sb.AppendLine();
                sb.AppendLine("*Acceptance Criteria:*");
                sb.Append(FormatList(story.AcceptanceCriteria));
                sb.AppendLine($"*Priority: {story.Priority} | Story Points: {story.StoryPoints}*");
                sb.AppendLine();
            }

            return sb.ToString();
        }

        private string GenerateFeatureStories()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append(GetSectionHeader("Feature Stories", 2));

            // Generate stories based on identified features
            List<UserStory> featureStories = new List<UserStory>();

            // Add stories for core gameplay features
            foreach (string feature in gameConcept.CoreGameplayFeatures)
            {
                featureStories.AddRange(GenerateStoriesForFeature(feature));
            }

            // Add stories for key features
            foreach (string feature in gameConcept.KeyFeatures)
            {
                featureStories.AddRange(GenerateStoriesForFeature(feature));
            }

            // Add stories for technical features
            foreach (string feature in gameConcept.TechnicalFeatures)
            {
                featureStories.AddRange(GenerateStoriesForTechnicalFeature(feature));
            }

            foreach (UserStory story in featureStories.Take(10)) // Limit to avoid overwhelming
            {
                sb.AppendLine($"**{story.Title}**");
                sb.AppendLine($"As a {story.UserType}, I want {story.Want} so that {story.SoThat}");
                sb.AppendLine();
                sb.AppendLine("*Acceptance Criteria:*");
                sb.Append(FormatList(story.AcceptanceCriteria));
                sb.AppendLine($"*Priority: {story.Priority} | Story Points: {story.StoryPoints}*");
                sb.AppendLine();
            }

            return sb.ToString();
        }

        private string GenerateTechnicalStories()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append(GetSectionHeader("Technical Stories", 2));

            List<UserStory> techStories = GenerateTechnicalStoriesForProject();

            foreach (UserStory story in techStories)
            {
                sb.AppendLine($"**{story.Title}**");
                sb.AppendLine($"As a {story.UserType}, I want {story.Want} so that {story.SoThat}");
                sb.AppendLine();
                sb.AppendLine("*Acceptance Criteria:*");
                sb.Append(FormatList(story.AcceptanceCriteria));
                sb.AppendLine($"*Priority: {story.Priority} | Story Points: {story.StoryPoints}*");
                sb.AppendLine();
            }

            return sb.ToString();
        }

        private string GenerateStoryMapping()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append(GetSectionHeader("Story Mapping & Prioritization", 2));

            sb.AppendLine("Stories are organized by priority and release phases:");
            sb.AppendLine();

            // Generate priority matrix
            Dictionary<string, List<string>> priorityMatrix = new Dictionary<string, List<string>>
            {
                ["Must Have (MVP)"] = new List<string>
                {
                    "Core gameplay mechanics",
                    "Basic player controls",
                    "Essential UI elements",
                    "Game state management",
                    "Basic audio/visual feedback"
                },
                ["Should Have (V1.1)"] = new List<string>
                {
                    "Advanced gameplay features",
                    "Enhanced UI/UX",
                    "Settings and preferences",
                    "Achievement system",
                    "Performance optimizations"
                },
                ["Could Have (V1.2)"] = new List<string>
                {
                    "Additional game modes",
                    "Social features",
                    "Analytics integration",
                    "Advanced graphics options",
                    "Accessibility features"
                },
                ["Won't Have (Future)"] = new List<string>
                {
                    "Complex multiplayer features",
                    "VR/AR support",
                    "Advanced AI systems",
                    "User-generated content",
                    "Cross-platform saves"
                }
            };

            foreach (KeyValuePair<string, List<string>> phase in priorityMatrix)
            {
                sb.Append(GetSectionHeader(phase.Key, 3));
                sb.Append(FormatList(phase.Value));
            }

            // Story points estimation
            sb.Append(GetSectionHeader("Story Points Estimation", 3));
            Dictionary<string, string> estimationGuide = new Dictionary<string, string>
            {
                ["1-2 Points"] = "Simple UI elements, basic configurations",
                ["3-5 Points"] = "Core gameplay mechanics, standard features",
                ["8-13 Points"] = "Complex systems, major features",
                ["21+ Points"] = "Requires breaking down into smaller stories"
            };

            sb.Append(FormatTable(estimationGuide, "Story Points", "Complexity Level"));

            return sb.ToString();
        }

        private List<PlayerPersona> GeneratePersonasForGenre()
        {
            List<PlayerPersona> personas = new List<PlayerPersona>();

            switch (gameConcept.GameGenre)
            {
                case GameGenre.RPG:
                    personas.Add(new PlayerPersona
                    {
                        Name = "The Explorer",
                        Description = "Enjoys discovering new areas, collecting items, and uncovering lore",
                        Motivation = "To experience a rich, immersive world with deep storytelling",
                        Goals = "Complete all quests, explore every area, maximize character development"
                    });
                    personas.Add(new PlayerPersona
                    {
                        Name = "The Optimizer",
                        Description = "Focuses on building the perfect character and mastering game systems",
                        Motivation = "To achieve optimal performance and master complex mechanics",
                        Goals = "Create powerful character builds, understand all game systems, achieve high efficiency"
                    });
                    break;

                case GameGenre.Action:
                    personas.Add(new PlayerPersona
                    {
                        Name = "The Competitor",
                        Description = "Seeks challenging gameplay and skill-based achievements",
                        Motivation = "To test their skills and achieve mastery through practice",
                        Goals = "Complete difficult challenges, achieve high scores, master controls"
                    });
                    personas.Add(new PlayerPersona
                    {
                        Name = "The Casual Player",
                        Description = "Wants fun, accessible gameplay without overwhelming complexity",
                        Motivation = "To relax and have fun during limited gaming time",
                        Goals = "Enjoy the experience, make steady progress, avoid frustration"
                    });
                    break;

                default:
                    personas.Add(new PlayerPersona
                    {
                        Name = "The Gaming Enthusiast",
                        Description = "Appreciates well-designed games with engaging mechanics",
                        Motivation = "To experience quality gameplay and interesting features",
                        Goals = "Enjoy the core experience, discover all content, appreciate game design"
                    });
                    personas.Add(new PlayerPersona
                    {
                        Name = "The Social Player",
                        Description = "Enjoys sharing experiences and playing with others",
                        Motivation = "To connect with friends and community through gaming",
                        Goals = "Share achievements, play with friends, participate in community"
                    });
                    break;
            }

            return personas;
        }

        private List<EpicStory> GenerateEpicsForGenre()
        {
            List<EpicStory> epics = new List<EpicStory>();

            // Core Game Experience Epic
            epics.Add(new EpicStory
            {
                Title = "Core Game Experience",
                UserType = "player",
                Want = "to engage with the fundamental gameplay mechanics",
                SoThat = "I can enjoy the intended game experience",
                AcceptanceCriteria = new List<string>
                {
                    "All core gameplay mechanics are implemented and functional",
                    "Player controls are responsive and intuitive",
                    "Game provides clear feedback for all player actions",
                    "Core game loop is engaging and well-paced"
                },
                Priority = "High",
                StoryPoints = 21
            });

            // Feature-specific epics based on genre
            switch (gameConcept.GameGenre)
            {
                case GameGenre.RPG:
                    epics.Add(new EpicStory
                    {
                        Title = "Character Progression",
                        UserType = "RPG player",
                        Want = "to develop and customize my character",
                        SoThat = "I can feel a sense of growth and personalization",
                        AcceptanceCriteria = new List<string>
                        {
                            "Character stats and abilities can be improved",
                            "Multiple progression paths are available",
                            "Progress feels meaningful and impactful",
                            "Customization options reflect player choices"
                        },
                        Priority = "High",
                        StoryPoints = 13
                    });
                    break;

                case GameGenre.Action:
                    epics.Add(new EpicStory
                    {
                        Title = "Combat Mastery",
                        UserType = "action player",
                        Want = "to master challenging combat mechanics",
                        SoThat = "I can feel skilled and accomplished",
                        AcceptanceCriteria = new List<string>
                        {
                            "Combat feels responsive and skill-based",
                            "Multiple strategies and approaches are viable",
                            "Difficulty scales appropriately with player skill",
                            "Combat feedback is clear and satisfying"
                        },
                        Priority = "High",
                        StoryPoints = 13
                    });
                    break;
            }

            // User Experience Epic
            epics.Add(new EpicStory
            {
                Title = "Seamless User Experience",
                UserType = "player",
                Want = "to have a smooth and intuitive experience",
                SoThat = "I can focus on enjoying the game rather than fighting the interface",
                AcceptanceCriteria = new List<string>
                {
                    "User interface is intuitive and accessible",
                    "Game performs smoothly on target platforms",
                    "Settings and options are comprehensive",
                    "Help and guidance are available when needed"
                },
                Priority = "Medium",
                StoryPoints = 8
            });

            return epics;
        }

        private List<UserStory> GenerateCoreGameplayStoriesForGenre()
        {
            List<UserStory> stories = new List<UserStory>();

            // Universal core stories
            stories.Add(new UserStory
            {
                Title = "Player Movement",
                UserType = "player",
                Want = "to move my character smoothly and responsively",
                SoThat = "I can navigate the game world effectively",
                AcceptanceCriteria = new List<string>
                {
                    "Character responds immediately to input",
                    "Movement feels smooth and natural",
                    "All movement directions work correctly",
                    "Movement speed feels appropriate"
                },
                Priority = "High",
                StoryPoints = 5
            });

            stories.Add(new UserStory
            {
                Title = "Game State Management",
                UserType = "player",
                Want = "to save and load my progress",
                SoThat = "I can continue playing where I left off",
                AcceptanceCriteria = new List<string>
                {
                    "Game saves progress automatically",
                    "Manual save option is available",
                    "Loading works reliably",
                    "Save data is protected from corruption"
                },
                Priority = "High",
                StoryPoints = 8
            });

            // Genre-specific core stories
            switch (gameConcept.GameGenre)
            {
                case GameGenre.RPG:
                    stories.Add(new UserStory
                    {
                        Title = "Character Interaction",
                        UserType = "RPG player",
                        Want = "to interact with NPCs and dialogue",
                        SoThat = "I can experience the story and world",
                        AcceptanceCriteria = new List<string>
                        {
                            "NPCs can be approached and talked to",
                            "Dialogue choices affect outcomes",
                            "Story progresses through conversations",
                            "Character relationships develop over time"
                        },
                        Priority = "High",
                        StoryPoints = 8
                    });
                    break;

                case GameGenre.Action:
                    stories.Add(new UserStory
                    {
                        Title = "Combat Mechanics",
                        UserType = "action player",
                        Want = "to engage in fast-paced combat",
                        SoThat = "I can feel the excitement of action gameplay",
                        AcceptanceCriteria = new List<string>
                        {
                            "Combat is responsive and immediate",
                            "Multiple attack types are available",
                            "Enemy AI provides appropriate challenge",
                            "Combat feedback is clear and satisfying"
                        },
                        Priority = "High",
                        StoryPoints = 13
                    });
                    break;
            }

            return stories;
        }

        private List<UserStory> GenerateStoriesForFeature(string feature)
        {
            List<UserStory> stories = new List<UserStory>();

            // Create contextual stories based on feature keywords
            string lowerFeature = feature.ToLower();

            if (lowerFeature.Contains("inventory") || lowerFeature.Contains("item"))
            {
                stories.Add(new UserStory
                {
                    Title = "Item Management",
                    UserType = "player",
                    Want = "to collect and manage items in my inventory",
                    SoThat = "I can organize and use the items I find",
                    AcceptanceCriteria = new List<string>
                    {
                        "Items can be picked up and stored",
                        "Inventory has sufficient capacity",
                        "Items can be organized and sorted",
                        "Item information is clearly displayed"
                    },
                    Priority = "Medium",
                    StoryPoints = 5
                });
            }

            if (lowerFeature.Contains("craft") || lowerFeature.Contains("building"))
            {
                stories.Add(new UserStory
                {
                    Title = "Crafting System",
                    UserType = "player",
                    Want = "to create new items from materials",
                    SoThat = "I can customize my experience and progress",
                    AcceptanceCriteria = new List<string>
                    {
                        "Crafting recipes are discoverable",
                        "Required materials are clearly shown",
                        "Crafting process is intuitive",
                        "Crafted items provide meaningful benefits"
                    },
                    Priority = "Medium",
                    StoryPoints = 8
                });
            }

            return stories;
        }

        private List<UserStory> GenerateStoriesForTechnicalFeature(string feature)
        {
            List<UserStory> stories = new List<UserStory>();

            if (feature.Contains("Multiplayer"))
            {
                stories.Add(new UserStory
                {
                    Title = "Multiplayer Connection",
                    UserType = "player",
                    Want = "to play with friends online",
                    SoThat = "I can share the game experience with others",
                    AcceptanceCriteria = new List<string>
                    {
                        "Can connect to online sessions",
                        "Friends can join my game",
                        "Network performance is stable",
                        "Synchronization works correctly"
                    },
                    Priority = "Medium",
                    StoryPoints = 13
                });
            }

            return stories;
        }

        private List<UserStory> GenerateTechnicalStoriesForProject()
        {
            return new List<UserStory>
            {
                new UserStory
                {
                    Title = "Performance Optimization",
                    UserType = "developer",
                    Want = "the game to run smoothly on target platforms",
                    SoThat = "players have a consistent experience",
                    AcceptanceCriteria = new List<string>
                    {
                        "Maintains 60 FPS on target hardware",
                        "Memory usage stays within limits",
                        "Loading times are reasonable",
                        "No performance degradation over time"
                    },
                    Priority = "Medium",
                    StoryPoints = 8
                },
                new UserStory
                {
                    Title = "Cross-Platform Compatibility",
                    UserType = "developer",
                    Want = "the game to work on all target platforms",
                    SoThat = "we can reach the intended audience",
                    AcceptanceCriteria = new List<string>
                    {
                        "Builds successfully for all platforms",
                        "Platform-specific features work correctly",
                        "Input systems adapt to platform",
                        "Performance meets platform requirements"
                    },
                    Priority = "High",
                    StoryPoints = 13
                }
            };
        }
    }

    public class PlayerPersona
    {
        public string Name { get; set; } = "";
        public string Description { get; set; } = "";
        public string Motivation { get; set; } = "";
        public string Goals { get; set; } = "";
    }

    public class EpicStory
    {
        public string Title { get; set; } = "";
        public string UserType { get; set; } = "";
        public string Want { get; set; } = "";
        public string SoThat { get; set; } = "";
        public List<string> AcceptanceCriteria { get; set; } = new List<string>();
        public string Priority { get; set; } = "";
        public int StoryPoints { get; set; } = 0;
    }

    public class UserStory
    {
        public string Title { get; set; } = "";
        public string UserType { get; set; } = "";
        public string Want { get; set; } = "";
        public string SoThat { get; set; } = "";
        public List<string> AcceptanceCriteria { get; set; } = new List<string>();
        public string Priority { get; set; } = "";
        public int StoryPoints { get; set; } = 0;
    }
}
