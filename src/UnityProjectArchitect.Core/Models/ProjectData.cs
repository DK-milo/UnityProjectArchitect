using System;
using System.Collections.Generic;

namespace UnityProjectArchitect.Core
{
    public class ProjectData
    {
        public string ProjectName { get; set; } = "";
        public string ProjectDescription { get; set; } = "";
        public string ProjectVersion { get; set; } = "1.0.0";
        public ProjectType ProjectType { get; set; } = ProjectType.General;
        public UnityVersion TargetUnityVersion { get; set; } = UnityVersion.Unity2023_3;
        public string TeamName { get; set; } = "";
        public string ContactEmail { get; set; } = "";
        public string RepositoryUrl { get; set; } = "";
        public List<DocumentationSectionData> DocumentationSections { get; set; } = new List<DocumentationSectionData>();
        public bool AutoGenerateDocumentation { get; set; } = true;
        public string DocumentationOutputPath { get; set; } = "Documentation/";
        public bool UseAIAssistance { get; set; } = false;
        public AIProvider AIProvider { get; set; } = AIProvider.Claude;
        public List<TemplateReference> AppliedTemplates { get; set; } = new List<TemplateReference>();
        public FolderStructureData FolderStructure { get; set; } = new FolderStructureData();
        public DateTime CreatedDate { get; set; }
        public DateTime LastModifiedDate { get; set; }
        public int DocumentationVersion { get; set; } = 1;

        public ProjectData()
        {
            CreatedDate = DateTime.Now;
            LastModifiedDate = CreatedDate;
            InitializeDefaultDocumentationSections();
        }

        private void InitializeDefaultDocumentationSections()
        {
            if (DocumentationSections.Count == 0)
            {
                DocumentationSections.AddRange(new[]
                {
                    new DocumentationSectionData { SectionType = DocumentationSectionType.GeneralProductDescription, IsEnabled = true },
                    new DocumentationSectionData { SectionType = DocumentationSectionType.SystemArchitecture, IsEnabled = true },
                    new DocumentationSectionData { SectionType = DocumentationSectionType.DataModel, IsEnabled = true },
                    new DocumentationSectionData { SectionType = DocumentationSectionType.APISpecification, IsEnabled = true },
                    new DocumentationSectionData { SectionType = DocumentationSectionType.UserStories, IsEnabled = true },
                    new DocumentationSectionData { SectionType = DocumentationSectionType.WorkTickets, IsEnabled = true }
                });
            }
        }

        public void AddTemplate(TemplateReference template)
        {
            if (!AppliedTemplates.Contains(template))
            {
                AppliedTemplates.Add(template);
                MarkModified();
            }
        }

        public void RemoveTemplate(TemplateReference template)
        {
            if (AppliedTemplates.Remove(template))
            {
                MarkModified();
            }
        }

        public DocumentationSectionData GetDocumentationSection(DocumentationSectionType sectionType)
        {
            return DocumentationSections.Find(section => section.SectionType == sectionType);
        }

        public void UpdateDocumentationSection(DocumentationSectionType sectionType, string content)
        {
            DocumentationSectionData section = GetDocumentationSection(sectionType);
            if (section != null)
            {
                section.Content = content;
                section.LastUpdated = DateTime.Now;
                MarkModified();
            }
        }

        public void IncrementDocumentationVersion()
        {
            DocumentationVersion++;
            MarkModified();
        }

        private void MarkModified()
        {
            LastModifiedDate = DateTime.Now;
        }

        public void ResetToDefaults()
        {
            ProjectName = "";
            ProjectDescription = "";
            ProjectVersion = "1.0.0";
            ProjectType = ProjectType.General;
            TargetUnityVersion = UnityVersion.Unity2023_3;
            TeamName = "";
            ContactEmail = "";
            RepositoryUrl = "";
            DocumentationSections.Clear();
            InitializeDefaultDocumentationSections();
            AutoGenerateDocumentation = true;
            DocumentationOutputPath = "Documentation/";
            UseAIAssistance = false;
            AIProvider = AIProvider.Claude;
            AppliedTemplates.Clear();
            FolderStructure = new FolderStructureData();
            DocumentationVersion = 1;
            MarkModified();
        }
    }

    public enum ProjectType
    {
        General,
        GameDevelopment,
        Game2D,
        Game3D,
        Unknown,
        EditorTool,
        VRApplication,
        VR,
        AR,
        MobileGame,
        Mobile,
        Mobile2D,
        Mobile3D,
        PC2D,
        PC3D,
        WebGL,
        ConsoleGame,
        Console,
        Multiplayer,
        Simulation,
        Educational,
        Prototype,
        Tool,
        Template
    }

    public enum UnityVersion
    {
        Unknown,
        Unity2021_3,
        Unity2022_1,
        Unity2022_2,
        Unity2022_3,
        Unity2023_1,
        Unity2023_2,
        Unity2023_3,
        Unity6000,
        Unity6001,
        Other
    }

    public enum AIProvider
    {
        Claude,
        OpenAI,
        Gemini,
        Local,
        Offline
    }

    public enum DocumentationSectionType
    {
        GeneralProductDescription,
        SystemArchitecture,
        DataModel,
        APISpecification,
        UserStories,
        WorkTickets,
        TechnicalSpecification,
        UserManual,
        DeveloperGuide,
        TestPlan,
        DeploymentGuide,
        SecurityConsiderations,
        PerformanceRequirements,
        ProjectOverview,
        ArchitectureOverview,
        CodeAnalysis,
        AssetAnalysis,
        PerformanceAnalysis,
        Recommendations,
        ProjectMetrics,
        Custom
    }


    public enum ExportFormat
    {
        Markdown,
        PDF,
        HTML,
        Word,
        JSON,
        XML
    }

    public class DocumentationSectionData
    {
        public DocumentationSectionType SectionType { get; set; }
        public string Title { get; set; } = "";
        public string Content { get; set; } = "";
        public bool IsEnabled { get; set; } = true;
        public AIGenerationMode AIMode { get; set; } = AIGenerationMode.Disabled;
        public string CustomPrompt { get; set; } = "";
        public DateTime LastUpdated { get; set; }
        public List<string> RequiredElements { get; set; } = new List<string>();
        public int WordCountTarget { get; set; } = 500;
        public bool AutoSave { get; set; } = true;
        public DocumentationStatus Status { get; set; } = DocumentationStatus.NotStarted;

        public bool HasContent => !string.IsNullOrWhiteSpace(Content);
        public int CurrentWordCount => string.IsNullOrWhiteSpace(Content) ? 0 : Content.Split(new char[] { ' ', '\t', '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries).Length;

        public void MarkAsGenerated()
        {
            LastUpdated = DateTime.Now;
        }
    }

    public enum AIGenerationMode
    {
        Disabled,
        AssistGeneration,
        FullGeneration,
        Enhancement
    }

    public enum DocumentationStatus
    {
        NotStarted,
        InProgress,
        Generated,
        Completed,
        Reviewed,
        Approved,
        Published,
        Outdated,
        NeedsReview
    }

    public class TemplateReference
    {
        public string TemplateName { get; set; } = "";
        public string TemplateId { get; set; } = "";
        public DateTime AppliedDate { get; set; }
        public string Version { get; set; } = "1.0.0";
        public Dictionary<string, object> Configuration { get; set; } = new Dictionary<string, object>();

        public override bool Equals(object obj)
        {
            return obj is TemplateReference other && TemplateId == other.TemplateId;
        }

        public override int GetHashCode()
        {
            return TemplateId?.GetHashCode() ?? 0;
        }
    }

    public class FolderStructureData
    {
        public List<FolderInfo> Folders { get; set; } = new List<FolderInfo>();
        public List<FileInfo> Files { get; set; } = new List<FileInfo>();
        public DateTime LastScanned { get; set; }
        public string RootPath { get; set; } = "";

        public void AddFolder(FolderDefinition folder)
        {
            // For compatibility - convert FolderDefinition to FolderInfo
            var folderInfo = new FolderInfo
            {
                Name = folder.Name,
                Path = folder.Path,
                CreatedDate = folder.CreatedDate
            };
            Folders.Add(folderInfo);
        }

        public class FolderInfo
        {
            public string Name { get; set; } = "";
            public string Path { get; set; } = "";
            public DateTime CreatedDate { get; set; }
            public int FileCount { get; set; }
            public long SizeBytes { get; set; }
        }

        public class FileInfo
        {
            public string Name { get; set; } = "";
            public string Path { get; set; } = "";
            public string Extension { get; set; } = "";
            public DateTime CreatedDate { get; set; }
            public DateTime ModifiedDate { get; set; }
            public long SizeBytes { get; set; }
        }
    }
}